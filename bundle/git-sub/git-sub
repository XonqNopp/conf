#!/bin/bash
# See https://XonqNopp.github.io/output/git-sub.html


CUR_DIR=$PWD
TOP_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
if [ $? = 128 ]; then
	echo "Not a git repository"
	exit 128
fi
# Just to be sure we have a repo, but the previous test should already fail
if [ -z "$TOP_DIR" ]; then
	echo "Not a git repository"
	exit 1
fi
GITSUB_FILE="$TOP_DIR/.gitsub"


# Abort on error:
set -e


###############################################################################
# Prints usage and exits
###############################################################################
function usageAndExit() {
	echo "Usage:"
	echo -e "\tgit sub clone <remote path> [<destination directory> [<commitish>]]"
	echo -e "\tgit sub init  # only the first time you want to work in an existing sub"
	echo -e "\tgit sub status  # git status of main repo and all subs"
	exit 1
}


###############################################################################
# Append data to .gitsub
# Arguments:
#	$1 - Directory path to the destination of the sub
#	$2 - Remote path to the sub
#	$3 - The commitish to check out in the sub
###############################################################################
function appendToSubFile() {
	sub=$1
	remote=$2
	ref=$3
	echo -e "$sub\t$remote\t$ref" >> $GITSUB_FILE
}


###############################################################################
# Check repo state is clean (no local changes)
###############################################################################
function stateClean() {
	if [ ! -z "$(git status --untracked-files=no --porcelain)" ]; then
		echo "Error: There are modified or staged files. This is not allowed."
		exit 1
	fi
}


###############################################################################
# Check if sub is already in .gitsub
# Arguments:
#	$1 - Directory path of the sub
# Returns:
#   0 if sub in .gitsub
###############################################################################
function subNotInGitsub() {
	sub="$1"
	return $(grep -q -e "^$sub	" $GITSUB_FILE 2> /dev/null)
}


###############################################################################
# Get commit hash of current HEAD
# Returns:
#   git commit hash
###############################################################################
function gitCommitHash() {
	echo $(git rev-parse $@ HEAD)
}


###############################################################################
# Clones a sub into the optionally specified directory
# Arguments:
#	$1 - Remote path to the sub
#	$2 - (OPTIONAL) Directory path to the destination of the sub
#	$3 - (OPTIONAL) The commitish to check out in the sub
###############################################################################
function subClone() {
	# Add a new sub
	remote="$1"

	if [ $# -gt 1 ]; then
		sub="$2"
	else
		sub=${1%.git*}
		sub=${sub##*/}
	fi

	ref=""
	if [ $# = 3 ]; then
		ref="$3"
	fi

	if [ -e "$sub" ]; then
		echo "Error: path '$sub' already exists"
		exit 1
	fi

	if subNotInGitsub "$sub"; then
		echo "Error: sub '$sub' already in .gitsub file but path not present, maybe it was moved?"
		exit 1
	fi

	stateClean

	mkdir $sub

	cd $sub

	git clone $remote . --quiet --no-checkout

	if [ -z "$ref" ]; then
		ref=$(git symbolic-ref --short HEAD) 
	fi

	git checkout $ref

	namedRef=$ref

	# Store commit in sub file
	ref=$(gitCommitHash)

	if [ "$namedRef" = "$ref" ]; then
		namedRef=""
	else
		namedRef=" = $namedRef"
	fi

	cd - > /dev/null

	appendToSubFile $sub $remote $ref

	# Cannot run `git add $sub` as it would be treated as submodule :-S
	# Need -f to add files which would be ignored otherwise
	git add -f $sub/*
	# cannot do in one line or it is considered a submodule
	git add -f $sub/.*  # ignores .git anyway

	git add $GITSUB_FILE

	commitMessage="adding new sub $sub@${ref:0:8}$namedRef from $remote"
	echo "git commit: $commitMessage"
	git commit -m "$commitMessage"

	cd $CUR_DIR

	# check did not mess anything
	git status -sb
}


###############################################################################
# Check if remote exists
# Arguments:
#	$1 - remote name
# Returns:
#   0 if provided remote not found
###############################################################################
function remoteExists() {
	remoteName="$1"

	for rem in $(git remote); do
		if [ "$rem" = "$remoteName" ]; then
			return 1
		fi
	done

	return 0
}


###############################################################################
# Init an existing sub
###############################################################################
function subInit() {
	# Init existing subs the first time
	for sub in $(cat $GITSUB_FILE | cut -f1); do
		remote=$(grep -e "^$sub	" $GITSUB_FILE | cut -f2)
		ref=$(grep -e "^$sub	" $GITSUB_FILE | cut -f3)

		echo "git sub [$sub]: init remote=$remote ref=$ref"
		cd $sub

		# init
		if [ ! -d ".git" ]; then
			git init
		fi

		# remote
		defaultRemote="origin"
		remoteName="$defaultRemote"
		if remoteExists $remoteName; then
			remoteName="upstream"
			if remoteExists $remoteName; then
				remoteName=$(git remote | head -n 1)
			fi
		fi

		if [ "$remoteName" = "" ]; then
			remoteName="$defaultRemote"
			echo "Add remote $remoteName: $remote"
			git remote add $remoteName $remote
		fi

		# fetch
		echo "Fetching: $remoteName"
		git fetch $remoteName

		# ref
		echo "Checkout $ref"
		git checkout -f $ref

		cd - > /dev/null
	done

	cd $CUR_DIR

	# check did not mess anything
	git status -sb
}


###############################################################################
# Updates gitsub to new state of sub
# Arguments:
#	$1 - Directory path of the sub
###############################################################################
function updateGitsub() {
	sub="$1"

	echo "updateGitsub($sub)"

	cd $sub

	if [ ! -d ".git" ]; then
		echo "$sub: Not a git repository, are you sure you ran 'git sub init' in parent git repo yet?"
		exit 1
	fi

	thisStatusLines=$(git status -s | wc -l)
	thisRemote=$(git status -sb | head -n 1)
	thisBranch=$(git branch --color=never 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	thisRef=$(gitCommitHash)
	thisShortRef=$(gitCommitHash --short)
	ref=$(grep -e "^$sub	" $GITSUB_FILE | cut -f3)

	if [ "${thisRemote:0:19}" = "## HEAD (no branch)" ]; then
		thisRemote=""
	fi

	if [ "${thisBranch:0:14}" = "(HEAD detached" ]; then
		thisBranch=""
	else
		thisBranch=" = $thisBranch"
	fi

	# DEBUG
	#echo "$sub: status=$thisStatusLines   remote=$thisRemote   branch=$thisBranch   ref=$thisShortRef    from subfile=${ref:0:7}"

	if [ "$ref" != "$thisRef" ]; then
		# Be careful to escape slash from sub otherwise sed thinks matching expr is finished and you get:
		# sed: -e expression #1 char XX: unknown option to `s'
		sed -i "s/^\(${sub//\//\\\/}\t[^\t]\+\)\t$ref/\1\t$thisRef/" $GITSUB_FILE
	fi

	cd - > /dev/null

	echo -n "$sub: "

	if [ "$thisStatusLines" = "0" ]; then
		echo "clean @$thisShortRef$thisBranch"

		if [[ ( "$thisRemote" != "" ) && ( "$thisRemote" != *"..."* ) ]]; then
			echo "WARNING: the branch of sub '$sub' is not remotely tracked yet."
			echo "Please push it to the remote ASAP."
			exit 1
		fi

		if [[ ( "$thisRemote" != "" ) && ( "$thisRemote" == *"["* ) ]]; then
			echo "WARNING: sub '$sub' local commits differ from its remote."
			echo "Please sync with the remote ASAP."
			exit 1
		fi

	else
		echo "dirty @$thisShortRef$thisBranch"

		if [[ ( "$thisBranch" == "" ) || ( "$thisRemote" == "" ) ]]; then
			echo "WARNING: there are changes in the sub '$sub' but it is not on a branch"
			echo "Please checkout to a branch in sub ASAP."
			exit 1
		fi

		if [[ "$main" != *"$sub/"* ]]; then
			echo "WARNING: we have changes committed to main repo BUT NOT to the remote of sub '$sub'."
			echo "Please commit and push in sub ASAP."
			exit 1
		fi
	fi
}


###############################################################################
# Checks status of all subs
###############################################################################
function subStatus() {
	git status -sb
	main=$(git status -s)

	if [ ! -f "$GITSUB_FILE" ]; then
		exit 0
	fi

	for sub in $(cat $GITSUB_FILE | cut -f1); do
		updateGitsub "$sub" --echo
	done

	# In case it was modified when we were in the sub:
	git add $GITSUB_FILE
	git status -s $GITSUB_FILE  # and show it
}


###############################################################################
# Updates git to new state of sub
# Arguments:
#	$1 - Directory path of the sub
#	$2 - [named] ref to update to
#	$3 - (OPTIONAL) set this flag if you want to edit the commit message
###############################################################################
function subUpdate() {
	if [ ! -f "$GITSUB_FILE" ]; then
		echo "No .gitsub file in this git repository, aborting"
		exit 1
	fi

	sub="$1"
	namedRef="$2"
	editCommitMessage=0
	if [ $# = 3 ]; then
		editCommitMessage=1
	fi

	# cd
	cd "$sub"

	# collect data: ref+namedRef
	git fetch --all
	git checkout "$namedRef"

	ref=$(gitCommitHash)

	if [ "$ref" = "$namedRef" ]; then
		namedRef=""
	else
		namedRef=" = $namedRef"
	fi

	# cd -
	cd - > /dev/null

	# update .gitsub
	updateGitsub "$sub"

	# git add .gitsub $sub
	git add -f .gitsub "$sub"

	# git commit -m "[$sub] update to ${ref:0:8} = $namedRef
	git commit -m "[$sub] update to ${ref:0:8}$namedRef"

	# if request change commit message: git commit --amend
	if [ "$editCommitMessage" = "1" ]; then
		git commit --amend
	fi
}



###############################################################################


if [ $# -lt 1 ]; then
	usageAndExit
fi

action=$1
shift

cd $TOP_DIR

case $action in
	"clone")
		subClone $@
		;;
	"init")
		subInit
		;;
	"status" | "st")
		subStatus
		;;

	"update")
		subUpdate $@
		;;
	*)
		cd $CUR_DIR
		echo "Unknown command: $action"
		usageAndExit
		;;
esac

cd $CUR_DIR

