#!/bin/bash
# See https://XonqNopp.github.io/_build/html/git-sub.html

CUR_DIR=$PWD
TOP_DIR=$(git rev-parse --show-toplevel)
if [ "$TOP_DIR" = "" ]; then
	echo "Not a git repository"
	exit 1
fi
GITSUB_FILE="$TOP_DIR/.gitsub"


function usageAndExit() {
	echo "Usage:"
	echo -e "\tgit sub clone path/to/sub [remote [ref]]"
	echo -e "\tgit sub init  # only the first time you want to work in an existing sub"
	echo -e "\tgit sub st  # git status of main repo and all subs"
	exit 1
}

function appendToSubFile() {
	sub=$1
	remote=$2
	ref=$3
	echo -e "$sub\t$remote\t$ref" >> $GITSUB_FILE
}

function subClone() {
	# Add a new sub
	sub="$1"
	remote="$2"
	ref=""
	if [ $# = 3 ]; then
		ref="$3"
	fi

	if [ ! -z "$(git status --untracked-files=no --porcelain)" ]; then
		echo "Error: There are modified or staged files. This is not allowed."
		exit 1
	fi
	
	if [ -d "$sub" ]; then
		echo "Error: path '$sub' already exists"
		exit 1
	fi

	if grep -q $sub $GITSUB_FILE 2> /dev/null; then
		echo "Error: sub '$sub' already in .gitsub file"
		exit 1
	fi

	mkdir $sub

	cd $sub

	# init
	git init

	echo "Add remote $remoteName: $remote"
	git remote add $remoteName $remote

	# fetch
	echo "Fetching..."
	git fetch $remoteName

	# ref
	if [ "$ref" != "" ]; then
		echo "Checkout $ref"
		git checkout -f $ref
	else
		# Use default branch as stored ref
		ref=$(git branch --color=never 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	fi

	cd - > /dev/null

	appendToSubFile $sub $remote $ref

	# Cannot run `git add $sub` as it would be treated as submodule :-S
	git add $sub/*
	# cannot do in one line or it is considered a submodule
	git add $sub/.*  # ignores .git anyway

	git add $GITSUB_FILE

	commitMessage="adding new sub $sub@$ref from $remote"
	echo "git commit: $commitMessage"
	git commit -m "$commitMessage"

	cd $CUR_DIR

	# check did not mess anything
	git status -sb
}

function subInit() {
	# Init existing subs the first time
	for sub in $(cat $GITSUB_FILE | cut -f1); do
		remote=$(grep $sub $GITSUB_FILE | cut -f2)
		ref=$(grep $sub $GITSUB_FILE | cut -f3)

		echo "git sub init $sub: running..."
		cd $sub

		# init
		if [ ! -d ".git" ]; then
			echo "git init"
			git init
		fi

		# remote
		remoteExists=0
		remoteName="origin"
		if [ "$(git remote | wc -l)" = "1" ]; then
			remoteName=$(git remote)
		fi
		for rem in $(git remote -v); do
			if [ "$rem" = "$remote" ]; then
				remoteExists=1
				break
			fi
		done
		if [ "$remoteExists" = "0" ]; then
			echo "Add remote $remoteName: $remote"
			git remote add $remoteName $remote
		fi

		# fetch
		echo "Fetching..."
		git fetch $remoteName

		# ref
		echo "Checkout $ref"
		git checkout -f $ref

		cd - > /dev/null
	done

	cd $CUR_DIR

	# check did not mess anything
	git status -sb
}

function subStatus() {
	git status -sb
	main=$(git status -s)

	if [ ! -f "$GITSUB_FILE" ]; then
		exit 0
	fi

	for sub in $(cat $GITSUB_FILE | cut -f1); do
		cd $sub

		if [ ! -d ".git" ]; then
			echo "$sub: Not a git repository, are you sure you ran 'git sub init' in parent git repo yet?"
			exit 1
		fi

		thisStatus=$(git status -s | wc -l)
		thisRemote=$(git status -sb | head -n 1)
		thisBranch=$(git branch --color=never 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
		ref=$(grep $sub $GITSUB_FILE | cut -f3)

		if [ "$ref" != "$thisBranch" ]; then
			sed -i "s/^\($sub\t[^\t]\+\t\)$ref/\1$thisBranch/" $GITSUB_FILE
		fi

		cd - > /dev/null

		echo -n "$sub: "
		if [ "$thisStatus" = "0" ]; then
			echo "clean @$thisBranch"

			if [[ "$thisRemote" != *"..."* ]]; then
				echo "WARNING: the sub's branch is not remotely tracked yet."
				echo "Please push it to the remote ASAP."
				exit 1
			fi

			if [[ "$thisRemote" == *"["* ]]; then
				echo "WARNING: sub has local commits not pushed to its remote yet."
				echo "Please push them to the remote ASAP."
				exit 1
			fi

		else
			echo "dirty @$thisBranch"

			if [[ "$main" != *"$sub/"* ]]; then
				echo "WARNING: we have changes committed to main repo BUT NOT to sub's remote."
				echo "Please commit and push in sub ASAP."
				exit 1
			fi
		fi
	done

	# In case it was modified when we were in the sub:
	git add $GITSUB_FILE
	git status -s $GITSUB_FILE  # and show it
}


if [ $# -lt 1 ]; then
	usageAndExit
fi

action=$1
shift

cd $TOP_DIR

case $action in
	"clone")
		subClone $@
		;;
	"init")
		subInit
		;;
	"status" | "st")
		subStatus
		;;
	*)
		cd $CUR_DIR
		usageAndExit
		;;
esac

cd $CUR_DIR

