#[core]
	#excludesfile = $HOME/.wash/git/gitignore  # variable not working
[user]
	name = XonqNopp
	email = xonqnoppp@gmail.com

[alias]
	# basic
	st       = status -sb

	# files
	chmodx   = update-index --chmod=+x
	gren = grep -n
	grip = grep -in
	gril = grep -il

	# commit
	cm       = commit -m
	cof      = commit --fixup
	cofe     = commit --fixup HEAD
          cop      = !git cofe && git push
	cos      = commit --squash
	cose     = commit --squash HEAD
          cops     = !git cose && git push
	cam      = commit -a -m
	caf      = commit -a --fixup
	cafe     = commit -a --fixup HEAD
          cap      = !git cafe && git push
	cas      = commit -a --squash
	case     = commit -a --squash HEAD
          caps     = !git case && git push
	amend    = commit --amend
	aamend   = commit --amend -a
	amende   = commit --amend --no-edit
	aamende  = commit --amend --no-edit -a
	ramend   = commit --amend --no-edit --reset-author

	# reset
	resha     = reset --hard
	resprev   = reset HEAD^
	reshaprev = reset --hard HEAD^

	# tag
	tg       = tag -n  # show tag message
	tagle    = tag -a -m
	lasttag  = tag -l --contains HEAD
	lastdate = log -1 --pretty=format:"%cd" --date=short

	# rebase
	rebi  = rebase -i
	rebim = !git rebi $(git merge-base master HEAD)
	recont = rebase --continue
	rabo = rebase --abort
	remas = rebase master
	rebum = rebase upstream/master
	frum  = !git fetch -p upstream && git rebum
	rebalf = rebase -s recursive -Xignore-space-at-eol

	# branches
	co     = checkout
	coo    = checkout -
	com    = checkout master
	cb     = checkout -b
	br     = branch
	bd     = branch -d
	rewind = merge --no-ff
	bra    = branch -va
	pum    = !git com && git fetch -p && git pull

	# remote
	putsh = push --follow-tags
	rem   = remote -v
	fep   = fetch -p
	fap   = fetch -p --all
	fup   = fetch -p upstream
	pinup = pull   upstream  # must add branch when invoking
	rebu  = rebase upstream  # must add branch when invoking
	pushf = push --force-with-lease
	pushu = push -u
	pushup = push -u upstream
	stapup = !git stash && git pull && git stash pop

	# diff
	df = difftool
	dfhat = difftool HEAD^
	mt = mergetool
	dispatch = format-patch -M -n -s -o outgoing
	difff = diff --name-status

	# log
	slog  = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(bold blue)%an%C(reset)' -1
	slogg = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(bold blue)%an%C(reset)'
	slob = !git slogg $(git merge-base master HEAD)..HEAD
	slub = !git slogg $(git merge-base upstream/master HEAD)..HEAD
	browse2vim = log --graph --all --pretty=format:'%h {%ci} %an %% %s%d'
	bo         = !git browse2vim | vim -S $HOME/.wash/vim/ftplugin/git/browse.vim -nRM -
	log-check  = log --pretty=fuller --name-status -1 --show-signature
	log-checkk = log --pretty=fuller --name-status
	log-stat   = log --pretty=fuller --stat -1
	log-statt  = log --pretty=fuller --stat
	log-deleted  = log -1 --full-history --
	log-deletedd = log --full-history --
	log-merges  = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s%n%n%b%n%n' --merges


[diff]
	tool = vimdiff
	ignoreSubmodules = none

[difftool]
	prompt = false

[merge]
	tool = vimgit

[mergetool]
	keepBackup = false

[mergetool "vimgit"]
	cmd = vim -d -f -c 'wincmd J' "$MERGED" "$LOCAL" "$REMOTE"
	keepBackup = false
	# $BASE is not worth it

[mergetool "vimgitall"]
	cmd = vim -d -f -c 'wincmd J' "$MERGED" "$LOCAL" "$BASE" "$REMOTE"
	keepBackup = false
	# if I really want to see $BASE

[rebase]
	autosquash = true

[pull]
	rebase = true

[push]
	followTags = true
	default = current  # do not ask for branch when pushing new branch

[submodule]
	recurse = true

[rerere]
	enabled = true

[instaweb]
	local = true

